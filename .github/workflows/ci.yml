name: Producer CPP SDK CI

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master

jobs:
  address-sanitizer:
    runs-on: ubuntu-20.04
    permissions:
      id-token: write
      contents: read
    env:
      CC: clang
      CXX: clang++
      AWS_KVS_LOG_LEVEL: 2
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt clean && sudo apt update
          sudo apt install -y libunwind-dev
          sudo apt-get install -y libssl-dev libcurl4-openssl-dev liblog4cplus-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base-apps gstreamer1.0-plugins-bad gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-tools
      - name: Build repository
        run: |
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DADDRESS_SANITIZER=TRUE -DBUILD_GSTREAMER_PLUGIN=TRUE -DBUILD_JNI=TRUE -DCMAKE_INSTALL_PREFIX=.
          make
          make install
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 10800
      - name: Run tests
        run: |
          cd build
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 60m ./tst/producerTest

  undefined-behavior-sanitizer:
    runs-on: ubuntu-20.04
    permissions:
      id-token: write
      contents: read
    env:
      CC: clang
      CXX: clang++
      AWS_KVS_LOG_LEVEL: 2
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt clean && sudo apt update
          sudo apt install -y libunwind-dev
          sudo apt-get install -y libssl-dev libcurl4-openssl-dev liblog4cplus-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base-apps gstreamer1.0-plugins-bad gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-tools
      - name: Build repository
        run: |
          mkdir build && cd build
          cmake .. -DBUILD_TEST=TRUE -DUNDEFINED_BEHAVIOR_SANITIZER=TRUE -DBUILD_GSTREAMER_PLUGIN=TRUE -DBUILD_JNI=TRUE -DCMAKE_INSTALL_PREFIX=.
          make
          make install
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 10800
      - name: Run tests
        run: |
          cd build
          ulimit -c unlimited -S
          timeout --signal=SIGABRT 60m ./tst/producerTest

  windows-msvc:
    runs-on: windows-2022
    env:
      AWS_KVS_LOG_LEVEL: 7
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Set up dependencies
        run: |
          choco install nasm strawberryperl
          choco install gstreamer --version=1.22.8
          choco install gstreamer-devel --version=1.22.8
      - name: Build repository
        run: |
          $env:Path += ';C:\Strawberry\perl\site\bin;C:\Strawberry\perl\bin;C:\Strawberry\c\bin;C:\Program Files\NASM;C:\gstreamer\1.0\x86_64\bin'
          git config --system core.longpaths true
          mkdir build
          cd build
          cmake .. -G "Visual Studio 16 2019" -A x64 -DBUILD_TEST=TRUE -DBUILD_GSTREAMER_PLUGIN=TRUE -DBUILD_JNI=TRUE
          cmake --build . --config Release
      - name: Archive and upload DLLs
        run: |
          mkdir -p D:\artifacts
          copy build\Release\*.dll D:\artifacts
        # Upload as a GitHub Actions artifact
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-dlls
          path: D:\artifacts\*.dll
